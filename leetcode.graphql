
curl 'https://leetcode.com/graphql' \
  -H 'Content-Type: application/json' \

// questionDetail

  --data-raw '{
    "operationName" : "questionDetail",
    "variables" : {
        "titleSlug" : "two-sum"  
    },
    "query" : "query questionDetail($titleSlug: String!) {question(titleSlug: $titleSlug) {  title  titleSlug  questionId  questionFrontendId  questionTitle  translatedTitle  content  translatedContent  categoryTitle  difficulty}}"
  }'


"query" : "query questionDetail($titleSlug: String!) {languageList {id name } submittableLanguageList {id name verboseName } statusList {id name } questionDiscussionTopic(questionSlug: $titleSlug) { id commentCount topLevelCommentCount} ugcArticleOfficialSolutionArticle(questionSlug: $titleSlug) { uuid  chargeType  canSee   hasVideoArticle  } question(titleSlug: $titleSlug) {  title  titleSlug  questionId  questionFrontendId  questionTitle  translatedTitle  content  translatedContent  categoryTitle  difficulty  stats  companyTagStatsV2  topicTags {  name  slug  translatedName  }  similarQuestionList {difficulty  titleSlug   title   translatedTitle  isPaidOnly  }  mysqlSchemas  dataSchemas  frontendPreviews  likes  dislikes  isPaidOnly  status  canSeeQuestion    enableTestMode    metaData    enableRunCode    enableSubmit    enableDebugger    envInfo    isLiked    nextChallenges {      difficulty      title      titleSlug      questionFrontendId    }    libraryUrl    adminUrl    hints    codeSnippets {      code      lang      langSlug    }    exampleTestcaseList    hasFrontendPreview  }}    "

// problemsetQuestionList

--data-raw '{
    "operationName": "problemsetQuestionList",
    "variables": {
        "categorySlug": "all-code-essentials",
        "skip": 0,
        #"limit": 50,
        "filters": {}
    },
    "query": " query problemsetQuestionList($categorySlug: String, $limit: Int, $skip: Int, $filters: QuestionListFilterInput) {  problemsetQuestionList: questionList(    categorySlug: $categorySlug    limit: $limit    skip: $skip    filters: $filters  ) {    total: totalNum    questions: data {      acRate   difficulty      paidOnly: isPaidOnly      status      title      titleSlug   }  } "
}'

"query": " query problemsetQuestionList($categorySlug: String, $limit: Int, $skip: Int, $filters: QuestionListFilterInput) {  problemsetQuestionList: questionList(    categorySlug: $categorySlug    limit: $limit    skip: $skip    filters: $filters  ) {    total: totalNum    questions: data {      acRate      difficulty      freqBar      frontendQuestionId: questionFrontendId      isFavor      paidOnly: isPaidOnly      status      title      titleSlug      topicTags {        name        id        slug      }      hasSolution      hasVideoSolution    }  }}    "

// problemsetQuestionListV2

{
    "query": "    query problemsetQuestionListV2($filters: QuestionFilterInput, $limit: Int, $searchKeyword: String, $skip: Int, $sortBy: QuestionSortByInput, $categorySlug: String) {  problemsetQuestionListV2(    filters: $filters    limit: $limit    searchKeyword: $searchKeyword    skip: $skip    sortBy: $sortBy    categorySlug: $categorySlug  ) {    questions {      id      titleSlug      title      translatedTitle      questionFrontendId      paidOnly      difficulty      topicTags {        name        slug        nameTranslated      }      status      isInMyFavorites      frequency      acRate    }    totalLength    finishedLength    hasMore  }}    ",
    "variables": {
        "skip": 0,
        "limit": 100,
        "categorySlug": "all-code-essentials",
        "filters": {
            "filterCombineType": "ALL",
            "statusFilter": {
                "questionStatuses": [],
                "operator": "IS"
            },
            "difficultyFilter": {
                "difficulties": [],
                "operator": "IS"
            },
            "languageFilter": {
                "languageSlugs": [],
                "operator": "IS"
            },
            "topicFilter": {
                "topicSlugs": [],
                "operator": "IS"
            },
            "acceptanceFilter": {},
            "frequencyFilter": {},
            "lastSubmittedFilter": {},
            "publishedFilter": {},
            "companyFilter": {
                "companySlugs": [],
                "operator": "IS"
            },
            "positionFilter": {
                "positionSlugs": [],
                "operator": "IS"
            },
            "premiumFilter": {
                "premiumStatus": [],
                "operator": "IS"
            }
        },
        "searchKeyword": "",
        "sortBy": {
            "sortField": "CUSTOM",
            "sortOrder": "ASCENDING"
        },
        "filtersV2": {
            "filterCombineType": "ALL",
            "statusFilter": {
                "questionStatuses": [],
                "operator": "IS"
            },
            "difficultyFilter": {
                "difficulties": [],
                "operator": "IS"
            },
            "languageFilter": {
                "languageSlugs": [],
                "operator": "IS"
            },
            "topicFilter": {
                "topicSlugs": [],
                "operator": "IS"
            },
            "acceptanceFilter": {},
            "frequencyFilter": {},
            "lastSubmittedFilter": {},
            "publishedFilter": {},
            "companyFilter": {
                "companySlugs": [],
                "operator": "IS"
            },
            "positionFilter": {
                "positionSlugs": [],
                "operator": "IS"
            },
            "premiumFilter": {
                "premiumStatus": [],
                "operator": "IS"
            }
        }
    },
    "operationName": "problemsetQuestionListV2"
}

// submissionList

{
    "query": "    query submissionList($offset: Int!, $limit: Int!, $lastKey: String, $questionSlug: String!, $lang: Int, $status: Int) {  questionSubmissionList(    offset: $offset    limit: $limit    lastKey: $lastKey    questionSlug: $questionSlug    lang: $lang    status: $status  ) {    lastKey    hasNext    submissions {      id      title      titleSlug      status      statusDisplay      lang      langName      runtime      timestamp      url      isPending      memory      hasNotes      notes      flagType      frontendId      topicTags {        id      }    }  }}    ",
    "variables": {
        "questionSlug": "add-two-numbers",
        "offset": 0,
        "limit": 20,
        "lastKey": null
    },
    "operationName": "submissionList"
}


// submissionDetails

{
    "query": "    query submissionDetails($submissionId: Int!) {  submissionDetails(submissionId: $submissionId) {    runtime    runtimeDisplay    runtimePercentile    runtimeDistribution    memory    memoryDisplay    memoryPercentile    memoryDistribution    code    timestamp    statusCode    user {      username      profile {        realName        userAvatar      }    }    lang {      name      verboseName    }    question {      questionId      titleSlug      hasFrontendPreview    }    notes    flagType    topicTags {      tagId      slug      name    }    runtimeError    compileError    lastTestcase    codeOutput    expectedOutput    totalCorrect    totalTestcases    fullCodeOutput    testDescriptions    testBodies    testInfo    stdOutput  }}    ",
    "variables": {
        "submissionId": 513239791
    },
    "operationName": "submissionDetails"
}

// globalData

{
    "query": "    query globalData {  userStatus {    userId    isSignedIn    isMockUser    isPremium    isVerified    username    realName    avatar    isAdmin    isSuperuser    permissions    isTranslator    activeSessionId    checkedInToday    completedFeatureGuides    notificationStatus {      lastModified      numUnread    }  }}    ",
    "variables": {},
    "operationName": "globalData"
}